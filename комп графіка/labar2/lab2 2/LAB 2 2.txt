#include <GLFW/glfw3.h>
#include <iostream>
#include <chrono>
#include <thread>
#include <Windows.h>
#include <ctime>
#include <math.h>

using namespace std;

void DrawOBJ() {

    glColor3f(0.52, 0.44, 1.0);

    glBegin(GL_LINES);
    glVertex3f(0.2, -0.2, -0.2);   
    glBegin(GL_LINES);//a                 //AFD
    glVertex3f(0.2, -0.2, 0.2);//f

    glVertex3f(0, 0.2, 0); //d
    glEnd();

    glColor3f(1.0, 0.84, 0.0);
    glBegin(GL_LINES);
    glVertex3f(0.2, -0.2, 0.2);                      //AFB
    glVertex3f(-0.2, -0.2, 0.2);
    glVertex3f(0, 0.2, 0);
    glEnd();

    glColor3f(0.94, 0.7, 0.5);
    glBegin(GL_LINES);
    glVertex3f(-0.2, -0.2, 0.2);
    glVertex3f(-0.2, -0.2, -0.2);  

    glVertex3f(0, 0.2, 0);
    glEnd();

    glColor3f(0.0, 1.0, 0.0);
    glBegin(GL_TRIANGLES);
    glVertex3f(-0.2, -0.2, -0.2);
    glVertex3f(0.2, -0.2, -0.2); 

    glVertex3f(0, 0.2, 0);
    glEnd();

    glColor3f(1.0, 0.51, 0.28);
    glBegin(GL_LINES);
    glVertex3f(0.2, -0.2, 0.2);
    glVertex3f(-0.2, -0.2, 0.2);
    glBegin(GL_LINES);
    glVertex3f(-0.2, -0.2, -0.2);
    glVertex3f(0.2, -0.2, -0.2);
    glEnd();

}
void side1() {  //розовий
    glColor3f(0.9, 0.2, 1);

    glBegin(GL_TRIANGLES);
    glVertex3f(0.2, -0.2, -0.2);      //a                 //AFD
    glVertex3f(0.2, -0.2, 0.2);//f
    glVertex3f(0, 0.2, 0); //d
    glEnd();
}
void side2() {
    glColor3f(-0.4, 0.5, 1);
    glBegin(GL_TRIANGLES);  //голуба
    glVertex3f(0.2, -0.2, 0.2);                      //AFB
    glVertex3f(-0.2, -0.2, 0.2);
    glVertex3f(0, 0.2, 0);
    glEnd();
}

void side3() {
    glColor3f(0, 1, 0);
                                    //зелена
    glBegin(GL_TRIANGLES);
    glVertex3f(-0.2, -0.2, 0.2);
    glVertex3f(-0.2, -0.2, -0.2);     //DFC
    glVertex3f(0, 0.2, 0);
    glEnd();
}
void side4() {
    glColor3f(1.0, 1.0, 1.0);
                                    //біла
    glBegin(GL_TRIANGLES);
    glVertex3f(-0.2, -0.2, -0.2);
    glVertex3f(0.2, -0.2, -0.2);   //BFC
    glVertex3f(0, 0.2, 0);
    glEnd();
}
void down() {
    glColor3f(1.0, 0.51, 0.28);
    glBegin(GL_QUADS);
    glVertex3f(0.2, -0.2, 0.2);
    glVertex3f(-0.2, -0.2, 0.2);
    glVertex3f(-0.2, -0.2, -0.2);
    glVertex3f(0.2, -0.2, -0.2);
    glEnd();
}
int main(void)
{
    GLFWwindow* window;

    if (!glfwInit())
        return -1;

    window = glfwCreateWindow(700, 600, "piramida", NULL, NULL);
    if (!window)
    {
        glfwTerminate();
        return -1;
    }
    float a = 0;
    glfwMakeContextCurrent(window);

    while (!glfwWindowShouldClose(window))
    {
        glClearColor(0.23f, 0.18f, 0.3f, 0.43f);
        glClear(GL_COLOR_BUFFER_BIT);
        DrawOBJ();
       // glRotatef(theta, 1, 1, 1);

  //      glPushMatrix();
  //      glRotatef(a, 1, 1, 1);
  ///*      side1();розова
  //      side2();голуба
  //      side3();зелена
  //      side4();біла
  //      down();*/
  //      if (a >= 100 && a <= 140) {
  //       
  //          side2(); //голуба
  //          side3(); //зебена
  //          side4(); //біла
  //          down();

  // 
  //      }
  //      else if (a >= 140 && a < 240) {
  //          side2();
  //          side3();
  //          
  //         down();

  //      }
  //      else if (a >= 240 && a < 360) {
  //          //side1();
  //          //side3();
  //          side4(); //біла
  //          side3();


  //      }
  //      else {
  //          side1(); //розова
  //          side4(); //біла
  //          down();
  //      }

  //      glPopMatrix();
      //  cout << a << endl;
        glfwSwapBuffers(window);
        if (a >= 360) {
            a = 0;
        }

        a += 0.1;
        glfwPollEvents();
    }

    glfwTerminate();
    return 0;
}